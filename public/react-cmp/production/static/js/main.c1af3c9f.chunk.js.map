{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","apps","React","lazy","bridgeEvent","EventTarget","Fallback","className","renderAppInElement","el","dataset","reactComponent","rendered","App","ReactDOM","render","fallback","keepLoading","console","log","rootEl","document","getElementById","process","REACT_APP_RENDER_CMP","split","forEach","item","componentEl","createElement","setAttribute","append","REACT_APP_RENDER_CMP_WITH_ATTRS","componentsWithAttrs","JSON","parse","e","cmp","class","Object","keys","data","attrKey","appNamespace","REACT_APP_NAMESPACE","window","ready","parseComponents","querySelectorAll"],"mappings":"oLAYeA,G,WAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,OCARQ,EAAO,CACX,IAAOC,IAAMC,MAAK,kBAAM,sDACxB,QAAWD,IAAMC,MAAK,kBAAM,gCAC5B,cAAiBD,IAAMC,MAAK,kBAAM,gCAClC,iBAAoBD,IAAMC,MAAK,kBAAM,iCAGjCC,EAAc,IAAIC,YAExB,SAASC,IACP,OAAO,qBAAKC,UAAU,aAAf,SAA4B,sBAAKA,UAAU,WAAf,UAA0B,wBAAW,wBAAW,wBAAW,6BAEhG,IAAMC,EAAqB,SAACC,GAC1B,GAAIR,EAAKQ,EAAGC,QAAQC,kBAAoBF,EAAGC,QAAQE,SAAS,CAE1D,IAAMC,EAAMZ,EAAKQ,EAAGC,QAAQC,gBAE5BG,IAASC,OACP,cAAC,WAAD,CAAUC,SAAU,cAACV,EAAD,IAApB,SAC8B,SAA3BG,EAAGC,QAAQO,YACR,cAACJ,EAAD,2BAASJ,EAAGC,SAAZ,IAAqBN,YAAaA,KAClC,cAACE,EAAD,MAGNG,GACFA,EAAGC,QAAQE,UAAW,OAGtBM,QAAQC,IAAI,KAAMV,EAAI,wBAKpBW,EAASC,SAASC,eAAe,QAEpCC,0NAAYC,sBACMD,0NAAYC,qBAAqBC,MAAM,KAE/CC,SAAQ,SAAAC,GACjB,IAAMC,EAAcP,SAASQ,cAAc,OAC3CD,EAAYE,aAAa,uBAAwBH,GACjDC,EAAYrB,UAAY,cACxBa,EAAOW,OAAOH,MAIlB,GAAGL,0NAAYS,gCAAgC,CAC7C,IAAIC,EACJ,IACEA,EAAsBC,KAAKC,MAAMZ,0NAAYS,iCAE/C,MAAMI,GACJlB,QAAQC,IAAI,gDAAiDiB,GAE5DH,GACDA,EAAoBP,SAAQ,SAAAW,GAC1B,IAAMT,EAAcP,SAASQ,cAAc,OAC3CD,EAAYE,aAAa,uBAAwBO,EAAIC,OACrDV,EAAYrB,UAAY,cACxBgC,OAAOC,KAAKH,EAAII,MAAMf,SAAQ,SAAAgB,GAC5Bd,EAAYE,aAAaY,EAASL,EAAII,KAAKC,OAE7CtB,EAAOW,OAAOH,MAMpB,IAAMe,EAAepB,0NAAYqB,qBAAuB,kBACxDC,OAAOF,GAAgB,CACrBG,OAAO,EACPC,gBAFqB,WAInB1B,SACC2B,iBAAiB,gBACjBtB,QAAQlB,KAGbqC,OAAOF,GAAcI,kBAK4B,oBAAvCF,OAAO,GAAD,OAAIF,EAAJ,eACdE,OAAO,GAAD,OAAIF,EAAJ,gBAMRnD,K","file":"static/js/main.c1af3c9f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './all.css';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n//list here all the components that can be inserted in a web page\nconst apps = {\n  'App': React.lazy(() => import('./App')),\n  'Gallery': React.lazy(() => import('./cmp/Gallery')),\n  'TestComponent': React.lazy(() => import('./cmp/TestComponent')),\n  'GalleryPostModal': React.lazy(() => import('./cmp/GalleryPostModal')),\n}\n//event manager to communicate between the components\nconst bridgeEvent = new EventTarget();\n//common fallback for all the components\nfunction Fallback() {\n  return <div className=\"cmp-loader\"><div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div></div>;\n}\nconst renderAppInElement = (el) => {\n  if (apps[el.dataset.reactComponent] && !el.dataset.rendered){\n    //get the component's name stored in the data-react-component attribute\n    const App = apps[el.dataset.reactComponent];\n    //render the component, inject all the HTML attributes and the Event bridge\n    ReactDOM.render(\n      <Suspense fallback={<Fallback />}>\n        {el.dataset.keepLoading !== \"true\"\n          ? <App {...el.dataset} bridgeEvent={bridgeEvent}/>\n          : <Fallback />\n        }\n      </Suspense>\n    , el);\n    el.dataset.rendered = true;\n  }\n  else{\n    console.log('el', el, 'is already rendered')\n  }\n}\n\n//ONLY FOR THE DEV PHASE\nconst rootEl = document.getElementById('root');\n//generate components without attributes\nif(process.env.REACT_APP_RENDER_CMP){\n  const components = process.env.REACT_APP_RENDER_CMP.split(',');\n  \n  components.forEach(item => {\n    const componentEl = document.createElement('div');\n    componentEl.setAttribute(\"data-react-component\", item);\n    componentEl.className = \"__react-cmp\";\n    rootEl.append(componentEl);\n  });\n}\n//generate components with attributes\nif(process.env.REACT_APP_RENDER_CMP_WITH_ATTRS){\n  let componentsWithAttrs;\n  try{\n    componentsWithAttrs = JSON.parse(process.env.REACT_APP_RENDER_CMP_WITH_ATTRS);\n  }\n  catch(e){\n    console.log('fail to parse REACT_APP_RENDER_CMP_WITH_ATTRS', e);\n  }\n  if(componentsWithAttrs){\n    componentsWithAttrs.forEach(cmp => {\n      const componentEl = document.createElement('div');\n      componentEl.setAttribute(\"data-react-component\", cmp.class);\n      componentEl.className = \"__react-cmp\";\n      Object.keys(cmp.data).forEach(attrKey => {\n        componentEl.setAttribute(attrKey, cmp.data[attrKey]);\n      });\n      rootEl.append(componentEl);\n    });\n  }\n}\n\n//the default name of the global object is ReactComponents, but it could be customized via the REACT_APP_NAMESPACE environment variable\nconst appNamespace = process.env.REACT_APP_NAMESPACE || \"ReactComponents\";\nwindow[appNamespace] = {\n  ready: true,\n  parseComponents(){\n    //parse the current document and inject all the components in the containers that have a \"__react-cmp\" class\n    document\n    .querySelectorAll('.__react-cmp')\n    .forEach(renderAppInElement);\n  }\n}\nwindow[appNamespace].parseComponents();\n\n//if dynamic parsing must be done via the window.ReactComponents.parseComponents() method\n//check the availability of window.ReactComponents object via window.ReactComponents.ready property\n//or define a window.ReactComponentsAsyncInit() method to be notified of the availability\nif(typeof window[`${appNamespace}AsyncInit`] === 'function'){\n  window[`${appNamespace}AsyncInit`]();\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}