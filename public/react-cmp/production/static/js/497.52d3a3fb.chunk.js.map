{"version":3,"file":"static/js/497.52d3a3fb.chunk.js","mappings":"oLA2DA,UAxDA,SAAiBA,GACf,IAAMC,GAAKC,EAAAA,EAAAA,QAAO,MACZC,EAASH,EAAMI,YACfC,EAAUL,EAAMK,QACtB,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,6FACOC,EADP,mFAEmEL,EAFnE,4KAM0BM,MAAM,GAAD,OAAIC,8CAAJ,0BAAmDC,mBAAmBH,KANrG,8BAMgHI,OANhH,OAMOC,EANP,OAOCP,EAASO,EAAIC,KAAKC,UAAUD,OAC5BE,EAAAA,EAAAA,IAAejB,EAAGkB,SARnB,0CAAD,GASKC,OAAM,SAAAC,GAAMC,QAAQC,IAAI,gBAAiBF,QAC7C,CAAChB,KAUF,eAAImB,UAAU,uDAAuDC,IAAKxB,EAA1E,SACGM,GAASA,EAAMmB,KAAI,SAAAC,GAAI,OACtB,eAAIH,UAAU,sBAAd,UACE,iBAAKA,UAAU,qEAAqEI,QAAS,SAACP,GAAD,OAX5E,SAACA,EAAGM,GAC3B,IAAME,EAAY,IAAIC,YAAY,mBAAoB,CACpDC,OAAQJ,IAEVxB,EAAO6B,cAAcH,GAOqFI,CAAiBZ,EAAGM,IAAxH,WACE,gBAAKH,UAAU,yCAAyC,qBAAaZ,8CAAb,kCAAoEe,EAAKO,WAAaC,IAAKR,EAAKS,KAAMC,QAAQ,UACtK,gBAAKb,UAAU,2CAAf,UACE,gBAAIA,UAAU,0BAAd,WACE,yBACE,gBAAIA,UAAU,OAAd,WACE,yCACA,iBAAMA,UAAU,WAAhB,SAA4BG,EAAKW,eAGrC,2BACE,uCACA,4BAASX,EAAKS,WAEhB,2BACE,wCACA,0BAAOT,EAAKY,MAAMC,KAAK,oBAjBQb,EAAKc,W,6HC9BtD,IAAMC,EAAQ,CACZC,qBAAsB,SAACC,GACrB,OAAIA,MACCC,OAAOC,WAAaD,OAAOC,UAAUC,OAASF,OAAOC,UAAUC,MAAMC,UACnEH,OAAOC,UAAUC,MAAMC,QAAQC,cAAcL,OAASM,EAAW,CAAEC,SAAS,EAAMC,YAAa,UAAa,GAErHC,kBAAmB,SAACT,GAClB,OAAIA,MACCC,OAAOS,GAAKT,OAAOS,EAAEC,IAAMV,OAAOS,EAAEC,GAAGC,SACrCX,OAAOS,EAAEC,GAAGC,OAAOP,cAAcL,OAASM,EAAW,CAAEC,SAAS,EAAMC,YAAa,UAAa,GAEzGlC,eAAgB,SAACjB,GACZ,YAAawD,iBAAiBC,UAChBzD,EAAG0D,iBAAiB,gBAC5BC,SAAQ,SAAAC,GACbA,EAAIC,OAAS,WACRC,KAAKC,WAEND,KAAKC,UAAUC,IAAI,SAGvBJ,EAAIK,IAAML,EAAIM,QAAQD,OAIxB,mCAGJE,aAAc,SAAUC,GAGtB,IAFA,IAAMC,EAAQ,iEACVC,EAAS,GACJC,EAAIH,EAAQG,EAAI,IAAKA,EAC5BD,GAAUD,EAAMG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,OAAS,KAE7D,OAAOE,GAETK,cAAe,SAASC,EAAKC,GAC3B,OAAOL,KAAKM,KAAKD,EAAML,KAAKE,UAAUG,GAAOD,EAAM,OAI1ClC,EAAuBD,EAAMC,qBAC7BU,EAAoBX,EAAMW,kBAC1BnC,EAAiBwB,EAAMxB,eAEvB0D,EAAgBlC,EAAMkC","sources":["cmp/Gallery.js","utils/Tools.js"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport { lazyLoadImages } from \"../utils/Tools\";\n\nfunction Gallery(props) {\n  const el = useRef(null);\n  const bridge = props.bridgeEvent;\n  const section = props.section;\n  const [posts, setPosts] = useState(null);\n  \n  useEffect(() => {\n    (async () => {\n      const query = `{\n        portfolio(filtering:{field: \"section\", operator:EQUAL, value:\"${section}\"},orderBy:{sort:PRIORITY, direction:ASC}){\n          data{id, name, client, pitch, description, thumbnail, types, images, technology_ids}\n        }\n      }`;\n      const res = await (await fetch(`${process.env.REACT_APP_CDN_URL}/graphql?query=${encodeURIComponent(query)}`)).json();\n      setPosts(res.data.portfolio.data);\n      lazyLoadImages(el.current);\n    })().catch(e => {console.log('fail to fetch', e)});\n  }, [section]);\n  \n  const postClickHandler = (e, item) => {\n    const postEvent = new CustomEvent(\"openGalleryModal\", {\n      detail: item\n    });\n    bridge.dispatchEvent(postEvent);\n  }\n\n  return (\n    <ul className=\"list-unstyled text-nowrap d-flex align-items-stretch\" ref={el}>\n      {posts && posts.map(item => (\n        <li className=\"d-inline-block mb-3\" key={item.id}>\n          <div className=\"card gallery-item noselect mt-3 mx-3 rounded border-0 shadow h-100\" onClick={(e) => postClickHandler(e, item)}>\n            <img className=\"card-img-top rounded-top lazyload fade\" data-src={`${process.env.REACT_APP_CDN_URL}/assets/images/gallery/${item.thumbnail}`} alt={item.name} loading=\"lazy\"/>\n            <div className=\"card-body text-start rounded-bottom pb-0\">\n              <ul className=\"list-unstyled text-wrap\">\n                <li>\n                  <h5 className=\"mb-0\">\n                    <small>client: </small>\n                    <span className=\"text-red\">{item.client}</span>\n                  </h5>\n                </li>\n                <li>\n                  <small>name: </small>\n                  <strong>{item.name}</strong>\n                </li>\n                <li>\n                  <small>types: </small>\n                  <span>{item.types.join(', ')}</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n}\nexport default Gallery;\n","//import \"lazysizes\";\n\nconst Tools = {\n  isBootstrapAvailable: (version) => {\n    if(!version) return true;\n    if(!(window.bootstrap && window.bootstrap.Modal && window.bootstrap.Modal.VERSION)) return false;\n    return window.bootstrap.Modal.VERSION.localeCompare(version, undefined, { numeric: true, sensitivity: 'base' }) >= 0;\n  },\n  isJQueryAvailable: (version) => {\n    if(!version) return true;\n    if(!(window.$ && window.$.fn && window.$.fn.jquery)) return false;\n    return window.$.fn.jquery.localeCompare(version, undefined, { numeric: true, sensitivity: 'base' }) >= 0;\n  },\n  lazyLoadImages: (el) => {\n    if('loading' in HTMLImageElement.prototype) {\n      const images = el.querySelectorAll(\"img.lazyload\");\n      images.forEach(img => {\n        img.onload = function(){\n          if(this.classList){\n            //adding the 'show' class \"nullify\" the 'fade' class that is applied to lazyload img\n            this.classList.add('show')\n          }\n        };\n        img.src = img.dataset.src;\n      });\n    }\n    else{\n      import('lazysizes');\n    }\n  },\n  randomString: function (length) {\n    const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    let result = '';\n    for (let i = length; i > 0; --i){\n      result += chars[Math.round(Math.random() * (chars.length - 1))];\n    }\n    return result;\n  },\n  randomBetween: function(min, max){\n    return Math.ceil(max - Math.random()*(max - (min - 1)));\n  }\n}\n\nexport const isBootstrapAvailable = Tools.isBootstrapAvailable;\nexport const isJQueryAvailable = Tools.isJQueryAvailable;\nexport const lazyLoadImages = Tools.lazyLoadImages;\nexport const randomString = Tools.randomString;\nexport const randomBetween = Tools.randomBetween;\nexport default Tools;"],"names":["props","el","useRef","bridge","bridgeEvent","section","useState","posts","setPosts","useEffect","query","fetch","process","encodeURIComponent","json","res","data","portfolio","lazyLoadImages","current","catch","e","console","log","className","ref","map","item","onClick","postEvent","CustomEvent","detail","dispatchEvent","postClickHandler","thumbnail","alt","name","loading","client","types","join","id","Tools","isBootstrapAvailable","version","window","bootstrap","Modal","VERSION","localeCompare","undefined","numeric","sensitivity","isJQueryAvailable","$","fn","jquery","HTMLImageElement","prototype","querySelectorAll","forEach","img","onload","this","classList","add","src","dataset","randomString","length","chars","result","i","Math","round","random","randomBetween","min","max","ceil"],"sourceRoot":""}