module.exports = [{
  name: "DNSimple",
  image: "dnsimple.png",
  key: "dnsimple",
  type: "Gestionnaire de DNS",
  description: '<a href="https://dnsimple.com/" target="_blank" rel="noopener noreferrer"><strong>DNSimple</strong></a>, qui peut aussi faire office de registrar a, comme son nom lâ€™indique, une interface de configuration simple et dispose mÃªme de Â« One-click services Â» pour sâ€™interfacer Â« automatiquement Â» avec diffÃ©rentes solutions dâ€™hÃ©bergement. Entre autres choses bien sÃ»r, comme le renouvellement automatique de domaines, les rappels dâ€™expirations, etcâ€¦ On peut aussi dÃ©lÃ©guer la configuration DNS de domaines achetÃ©s ailleurs (comme chez OVH), et donc gÃ©rer tous ses noms de domaines au mÃªme endroit.'
},{
  name: "Let's Encrypt",
  image: "lets-encrypt.png",
  key: "letsencrypt",
  type: "GÃ©nÃ©ration du certificat SSL",
  description: '<strong><a href="https://letsencrypt.org/">Letâ€™s Encrypt</a></strong> est le "SSL pour tous". La configuration et le maintien du certificat est gÃ©rÃ© directement par la solution dâ€™hÃ©bergement.'
},{
  name: "Heroku",
  image: "heroku.png",
  key: "heroku",
  type: "HÃ©bergement",
  description: '<strong><a href="https://heroku.com">Heroku</a></strong>, propriÃ©tÃ© de <strong><a href="https://www.salesforce.com/">Salesforce</a></strong> et utilisant la technologie <strong><a href="https://aws.amazon.com/fr/ec2/">AWS&nbsp;EC2</a></strong>, est la pierre angulaire de la stack. Le (gros) avantage de la solution est la possibilitÃ© de <strong><a href="https://en.wikipedia.org/wiki/Scalability#Horizontal_and_vertical_scaling">scaling</a></strong> (horizontal ou vertical) Ã  la demande. Cela permet de dimensionner facilement les performances selon le trafic de lâ€™application, et de supporter des charges de plusieurs centaines voire milliers de requÃªtes par seconde.'
},{
  name: "NodeJS",
  image: "nodejs.png",
  key: "nodejs",
  type: "Langage server",
  description: '<strong><a href="https://nodejs.org/">NodeJS</a></strong>, avec le framework <strong><a href="https://expressjs.com/">Express</a></strong>. Outre le fait quâ€™avoir le mÃªme langage pour la partie serveur et client fait Â« Ã©conomiser Â» la maÃ®trise dâ€™un langage supplÃ©mentaire, pouvoir utiliser le mÃªme code Ã  des endroits diffÃ©rents est toujours le bienvenu. Lâ€™Ã©norme communautÃ© aidant, il y a toujours une solution (ou des parties de solution) Ã  chaque problÃ¨me.'
},{
  name: "MySQL",
  image: "mysql.png",
  key: "mysql",
  type: "Moteur de base de donnÃ©es",
  description: '<strong><a href="https://www.mysql.com/">MySQL</a></strong> hÃ©bergÃ©e avec la solution <strong><a href="https://aws.amazon.com/fr/rds/">AWS RDS</a></strong>. Encore une fois, performance et souplesse sont importants. Le fait de dÃ©porter la base de donnÃ©e sur les serveurs dâ€™Amazon permet de se concentrer sur lâ€™architecture de lâ€™application, sans se soucier de savoir oÃ¹ se trouve la data. <i>Bonus : Heroku utilisant des instances AWS EC2, la connexion avec AWS RDS est excellente.</i>'
},{
  name: "Knex",
  image: "knex.png",
  key: "knex",
  type: "Constructeur de requÃªtes",
  description: 'Le constructeur de requÃªtes <strong><a href="http://knexjs.org/">KnexJS</a></strong> permet de faire la connexion entre le serveur et la base de donnÃ©es en Ã©vitant, entre autres, les problÃ¨mes dâ€™injection SQL.'
},{
  name: "Pug",
  image: "pug.png",
  key: "pug",
  type: "Moteur de templating cÃ´tÃ© serveur",
  description: 'DÃ©routant de premier abord, le moteur de template <strong><a href="https://pugjs.org/api/getting-started.html">Pug</a></strong> est extrÃªmement pratique car il substitue lâ€™utilisation des balises HTML par lâ€™indentation du code et lâ€™utilisation de la syntaxe CSS. En rÃ©sulte un code plus concis (car il nâ€™y a plus de balises fermantes, ni de dÃ©claration des attributs Â« class Â» et Â« id Â» notamment) et donc plus rapide Ã  Ã©crire.'
},{
  name: "LESS",
  image: "less.png",
  key: "less",
  type: "PrÃ©processeur CSS",
  description: '<strong><a href="http://lesscss.org/">LESS</a></strong> permet de dynamiser du CSS, ou en tout cas dâ€™Ã©crire du CSS comme il aurait toujours dÃ» sâ€™Ã©crire ğŸ˜…'
},{
  name: "Ember",
  image: "ember.png",
  key: "ember",
  type: "Framework cÃ´tÃ© client",
  description: 'Selon les cas de figure, dâ€™uniquement <strong><a href="https://jquery.com/">jQuery</a></strong>&nbsp;(pour les applications les plus simples) ou de <strong><a href="https://emberjs.com/">Ember</a></strong> (pour les applications plus complexes) en framework Javascript. <em>Nâ€™oublions jamais : il faut toujours utiliser le bon outil pour le bon job !</em><br><br>Ember est le choix de lâ€˜agence depuis 2013 et rÃ©pond toujours Ã  nos attentes ! Ce framework (certes moins trendy que React ou Angular) allie une souplesse dâ€™utilisation avec tout de mÃªme un certain cadre, ce qui le rend agrÃ©able Ã  utiliser, notamment avec son CLI <strong><a href="https://ember-cli.com/">ember-cli</a></strong>. La sÃ©paration entre le code logique et les templates, mais Ã©galement le support du langage <strong><a href="https://emblemjs.com/">Emblem</a></strong> pour les Ã©crire en font toujours notre framework de prÃ©dilection !'
},{
  name: "AWS S3",
  image: "s3.png",
  key: "s3",
  type: "Stockage de mÃ©dias",
  description: 'Le service de stockage de mÃ©dias <strong><a href="https://aws.amazon.com/fr/s3/">AWS S3</a></strong> allie lâ€™aspect performance pour le tÃ©lÃ©chargement des mÃ©dias et allÃ¨ge la charge des serveurs web. Ã‰galement, il faut garder Ã  lâ€™esprit que les applications hÃ©bergÃ©es chez Heroku sont dites Â« stateless Â» donc Ã  chaque dÃ©ploiement de code ou scaling de serveur, tout ce qui nâ€™est pas le code mÃªme de lâ€™application est supprimÃ©.'
},{
  name: "Git",
  image: "git.png",
  key: "git",
  type: "ContrÃ´leur de sources",
  description: '<a href="https://git-scm.com/"><strong>Git</strong></a>, et plus prÃ©cisÃ©ment son worflow Gitflow. <em>Bonus : Heroku fonctionne justement avec des dÃ©pÃ´ts Git pour le dÃ©ploiement de code !</em> Il suffit donc de pousser la branche Â« master Â» sur lâ€™application pour non seulement la mettre Ã  jour, mais aussi dÃ©clencher tout le processus de redÃ©marrage de serveurs, lâ€™installation des Ã©ventuels nouveaux packages, etcâ€¦ Un gain de temps clairement non nÃ©gligeable.'
},{
  name: "Gitlab",
  image: "gitlab.png",
  key: "gitlab",
  type: "Gestionnaire de dÃ©pÃ´ts",
  description: 'Le gestionnaire de dÃ©pÃ´ts <strong><a href="https://gitlab.com/">Gitlab</a></strong>, une alternative Ã  Github, a gagnÃ© une certaine popularitÃ© depuis le rachat de Github par Microsoft.'
}]